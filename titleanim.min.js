let plcholdertitle = "αcidbloχ-αlρha";
const tt=[];let ci=0;for(let e=0;e<9;e++){const t="▁▂▃▄▅▄▃▂".slice(e)+"▁▂▃▄▅▄▃▂".slice(0,e);tt.push(t)}document.addEventListener("DOMContentLoaded",(function(){setInterval((()=>{document.title=plcholdertitle+tt[ci],ci=ci=(ci+1)%tt.length}),400)}));
const codes = [
    ['Y', 'A', 'M', 'E', 'R', 'O'],
    ['S','P','E','E','N']
];

let enabled = false;
let curkeys = codes.map(() => 0);
let audioContext = null;
let audioBuffer = null;

const txt = document.getElementById('maintext');

function displayFrequencyPeaks(peaksArray, txtElement) {
    const bars = ["_", "▁", "▂", "▃", "▄", "▅", "▆", "▇", "█"];
    const barCount = bars.length - 1;

    function getBar(normalizedPeak) {
        const barIndex = Math.min(
            barCount,
            Math.floor(normalizedPeak * barCount * 1.5)
        );
        return bars[barIndex];
    }

    const visualizerString = peaksArray
        .map(peak => getBar(peak))
        .join('');

    txtElement.textContent = visualizerString;
}

async function magicpaper() {
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const response = await fetch("/nsoloop.ogg");
    const arrayBuffer = await response.arrayBuffer();
    const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
    const source = audioContext.createBufferSource();
    const gainnode = audioContext.createGain();
    const analyser = audioContext.createAnalyser();

    analyser.fftSize = 1024;
    const bufferLength = analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    gainnode.gain.value = 0.3;
    source.buffer = audioBuffer;
    source.loop = true;
    source.connect(analyser);
    analyser.connect(gainnode);
    gainnode.connect(audioContext.destination);

    source.start(0);

    const kangel = document.getElementById('speen');

    if (txt) {
        const NUM_BARS = 12;
        const previousPeaks = new Array(NUM_BARS).fill(0);
        const SMOOTHING = 0.7;
        const DECAY = 0.4;

        setInterval(() => {
            analyser.getByteFrequencyData(dataArray);

            const segmentSize = Math.floor(bufferLength / NUM_BARS);
            const newPeaks = new Array(NUM_BARS).fill(0);

            for (let barIndex = 0; barIndex < NUM_BARS; barIndex++) {
                const start = barIndex * segmentSize;
                const end = (barIndex === NUM_BARS - 1) ? bufferLength : (barIndex + 1) * segmentSize;
                const segmentLength = end - start;

                let sum = 0;
                for (let i = start; i < end; i++) {
                    sum += dataArray[i];
                }

                if (segmentLength > 0) {
                    newPeaks[barIndex] = (sum / segmentLength) / 255;
                }
            }

            const smoothedPeaks = newPeaks.map((newPeak, i) => {
                const prev = previousPeaks[i];
                let result;
                if (newPeak > prev) {
                    result = prev * (1 - SMOOTHING) + newPeak * SMOOTHING;
                } else {
                    result = prev - DECAY;
                }
                result = Math.max(0, Math.min(1, result));
                previousPeaks[i] = result;
                return result;
            });

            displayFrequencyPeaks(smoothedPeaks, txt);
        }, 40);
    }

    if (kangel) {
        kangel.src = 'images/kangeldrug.png';
    }

    plcholdertitle = "NEEDY STREAMER OVERLOAD";
    const newstyle = document.createElement('style');
    const css = `
        body{animation:movebg calc(calc(1s/var(--bpm))*60)infinite cubic-bezier(0,.1,0,1)}.bounce{animation:bounce calc(calc(1s/var(--bpm))*60)cubic-bezier(0,.1,0,1)infinite}.jump{position:relative;animation:jump calc(calc(1s/var(--bpm))*60)cubic-bezier(0,.1,0,1)infinite}.rainbow{background:linear-gradient(to right,#ff0000,#ff7f00,#ffff00,#00ff00,#0000ff,#4b0082,#9400d3,#ff0000);background-size:400%100%;animation:tripping calc(calc(60s/var(--bpm))*2)cubic-bezier(0,.1,0,1)infinite}.rainbow{background:linear-gradient(to-right,#ef5350,#ff9800,#ffee58,#4caf50,#29b6f6,#9c27b0,#ef5350)}@keyframes bounce{0%{height:200px}95%{height:150px}100%{height:200px}}@keyframes jump{0%{bottom:0;height:200px;width:200px}40%{bottom:50px;height:300px;width:200px}100%{bottom:0;height:200px;width:200px}}@keyframes tripping{0%{background-position:0%0%}100%{background-position:-300%0%}}
    `;
    newstyle.textContent = css;
    document.head.appendChild(newstyle);

    const lsddiv = document.createElement('div');
    lsddiv.classList = "lsd rainbow";
    document.body.prepend(lsddiv);
}


async function setupSpeen() {
    const newstyle = document.createElement('style');
    const css = `
        @keyframes speen {0% { transform: rotate(0deg); }100% { transform: rotate(1440deg); }}body.is-spinning {animation: speen 2000ms cubic-bezier(0, 0.1, 0, 1) forwards;}`;
    newstyle.textContent = css;
    document.head.appendChild(newstyle);
}

async function speen() {
    const body = document.body;
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const response = await fetch("/speen.ogg");
    const arrayBuffer = await response.arrayBuffer();
    const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
    const source = audioContext.createBufferSource();
    const gainnode = audioContext.createGain();
    gainnode.gain.value = 0.3;
    gainnode.connect(audioContext.destination);
    source.connect(gainnode);
    source.buffer = audioBuffer;
    source.start(0);
    body.classList.add('is-spinning');
    setTimeout(() => {
        body.classList.remove('is-spinning');
    }, 4000);
}
function coolfunction(aa) {
    if (aa === 0) {
        if (!enabled) {magicpaper();}
    } else if (aa === 1) {
        speen();
    }
}
window.addEventListener('keydown', (e) => {
    const key = e.key.toLowerCase();
    for (let i = 0; i < codes.length; i++) {
        const code = codes[i];
        let curkey = curkeys[i];
        const nextkey = code[curkey].toLowerCase();
        if (key === nextkey) {
            curkeys[i]++; 
        } else {
            curkeys[i] = 0;
            if (key === code[0].toLowerCase()) {
                curkeys[i] = 1;
            }
        }
        if (curkeys[i] === code.length) {
            e.preventDefault();
            console.log(i)
            coolfunction(i);
            if (i == 0) {
                enabled = true;
            }

            curkeys[i] = 0;
        }
    }
});

setupSpeen();